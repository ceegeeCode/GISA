{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww37900\viewh20960\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Outline of rawRarity0 in SAonGISA_v10_unix.c:\
\
1. Set file names of files to be outputted.\
\
2. Get content of desired directory (of the query pdb\'92s). 
\f1 \expnd0\expndtw0\kerning0
ListDirectoryContents/ListDirectoryContents2\

\f0 \kerning1\expnd0\expndtw0 \
3. Bulk memory allocation  to chain-info keeping pointer, 
\f1 \expnd0\expndtw0\kerning0
chainInStr
\f0 \kerning1\expnd0\expndtw0 .\
\
4.If CATH data, read in the \'93positive list\'94, 
\f1 \expnd0\expndtw0\kerning0
cathListPath.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 5. Fetch chain info of the query structures. Here, if CATH data, take intersection with CATH positive list. Also get the max chain length and the number of sub-structures.\
\
6. Allocate memory to pointer holding the Gauss invariants\'92 values, 
\f1 I_measures. \
\

\f0 7. Allocate memory to pointer holding the 3d-coord\'92s of each chain (ptr_chain).\
\
8. Allocate memory to some pointers for query: to hold I-values on window pairs and for the scores (
\f1 alloc_init_I_windowPairs_ptr, alloc_init_queryRawScore, alloc_init_ptr_Irarity_windowPairs).\
\

\f0 9. Load data base (DB): read in the DB of I-values for pairs  
\f1 (readDBresultsWindowPairsToPtr
\f0 ).\
\
10. Read the mutual writhe values into a 1d-array and sort it. We also load a similar array containing the absolute values of the writhe numbers, and a particular array containing for each structure the max absolute value of the writhe (across all its window pairs), plus two similar ones for considering only the max-abs-mutual among the \
positive mutuals and for only considering the max-abs mutual among the negative mutuals (in each structure). For sorting: 
\f1 heapSort1dArray.\

\f0 \
14. If p-values are called (ie 
\f1 absMutValScorePValues_b 
\f0 is 1): Read in rarityScore-data and generate the distribution of these (
\f1 readSortRarityScoreData).\

\f0 \
15. A couple of allocation for read-out names.\
\
16. Main loop starts here. Consists in outer loop over the query files (structures) and an inner loop over the chains in each query structure.\
\
16.1. If CATH data, check if query is in positive list of CATH domains (else continue to next structure).\
\
16.2. Reinitialize the chain-info pointer (
\f1 reinit_chainInStr\

\f0 ) and fetch the chain info (
\f1 readPDBChainStructureSCOP\

\f0 , 
\f1 readPDBDomainStructureCATH\
, readPDBChainStructure2)\
\

\f0 17. Inner loop over the sub-structures of the query file starts here.\
\
17.1. We skip the chain if it is too long (if it length is above the pre-defined 
\f1 maxChainLength\

\f0 ). Also, if CATH data, the domain is a subset of a single chain, so if the current chain is \'93the wrong one\'94 we skip it.\
\
17.2. Set som structure/chain characteristics in the the pointer holding the I-values. And set a chain-length.\
\
17.3. If SCOP data, we skip the chain if it is class h, i, j or k.\
\
17.4. Read in the 3d-coord chain (
\f1 main_readPDB2
\f0 ) and populate the pointer holding the 3d-coord array (
\f1 ptr_segment
\f0 ).\
17.4.1. Skip chain if it contains a too long segment.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 17.5. Initialize the I-values in the pointer holding the I-values 
\f1 (I_measures).\

\f0 \
17.6. Compute the I-values for the query (populate the 
\f1 I_measures
\f0  pointer with the Gauss integral values). (
\f1 aggrAndW, aggrAndW_ExAbs
\f0  or 
\f1 wVal+aggr
\f0 ).\
\
18. The actual scoring/matching starts here.\
\
18.1. Derive the values of the invariants on the window pairs (
\f1 getInvariantsOnWindowPairs\

\f0 ) for the query. This populates the 
\f1 I_windowPairs
\f0  pointer.\
\
19.2. Normalize the query\'92s window pairs values if desired (
\f1 normalizeQueryWindowPairsPtr\

\f0 ).\
\
19.3. Loop over the query\'92s window pairs in a double loop over the windows. Only consider the \'93upper triangular plus the diagonal\'94. Within this loop the core of the matching/scoring takes place.\
\
19.4.1. Find the max-mutual abs I-value (for the invariants that are considered); distinguish between no-sign and signed (abs or pos/neg mutuals). Actual \'93single window pairs\'94, ie pairs of the same window (k=l), are disregarded.\
 \
19.4.1. Skip the pair: if the two segments (windows) are not disjoint (ie they overlap).\
\
19.4.2.1 If we only use the max-abs mutual writhe per query for scoring (ie of 
\f1 useOnlyMaxMutVal_b 
\f0 is 1): (non-signed case) record the max-abs-mutual writhe so far (for the query), and skip the pair if the abs-mutual writhe is below that mark. Handle the signed case similarly. Else: collect/replace the window indices for the pair (
\f1 collect_Irarity_windowPairs
\f0 ); the recorded score of 0 is just a dummy, the true score will be computed once we are through the pairs loop for the query at which point we know the max-abs mutual writhe for the query,  
\f1 maxAbsMutValQuery
\f0 .\
\
19.4.2.2. If we score by abs-mutual writhe (and not only be the max-abs mutual writhe per query):  collect the \'93rarity\'94 of all pairs having an abs mutual writhe above the set threshold. So skip the pair if their abs-mutual writhe is below the set threshold, and else:  look-up the index of the abs-mutual writhe for the given pair in the loaded back ground distribution held in 
\f1 ptr_absMutualWritheDistr
\f0  (
\f1 bisectionalSearchValueL
\f0 ). Then compute the corresponding p-value and collect the result (
\f1 collect_Irarity_windowPairs
\f0 ).\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 19.4.3. 
\f0 Loop over pairs ends here.\

\f1 \
20.1.1. 
\f0 Scoring and collecting info when we only use the max-abs mutual writhe per query for scoring (possibly distinguishing by sign): (unsigned) look up the obtained max-abs mutual writhe for the query,  
\f1 maxAbsMutValQuery
\f0 , in the back ground data base held in 
\f1 ptr_maxAbsMutualWritheDistr (bisectionalSearchValueL).
\f0  Record info on the \'93max attaining\'94 window pair in a string for later write out. Handle signed version similarly.\
\
20.1.2. If we score by abs-mutual writhe (and not only be the max-abs mutual writhe per query): sum up the scores collected in the pairs loop (above) and record the window info in a string for later write out. \
The final score for the query is set to the average score across all window pairs considered for the query. If desired (
\f1 absMutValScorePValues_b 
\f0 is 1) a corresponding p-value is computed (and recorded): this is done by a look-up in the back ground data base held in 
\f1 ptr_absMutValScoresDistr
\f0  (only doable if such a score distribution is available/pre-made for the considered data base).  \
\
20.2. Collect the scores, p-values and window pair info obtained for the query (
\f1 collect_queryRawScore
\f0 ). \
\
17.7. End of inner-loop (loop-over-chains) ends here.\
\
16.3. End of outer loop over files ends here.\
\
21. Sort the obtained score results (
\f1 heapSortRawScores
\f0 ) and write to file if desired. Close the output file.\
\
22. Free some memory (
\f1 ptr_segment, ptr_chain, I_measures
\f0  and 
\f1 dirContent.ptr_dirList).\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \
23. Report some run-times plus how many files and chains were processed and how many query window pairs that had a abs-mutual writhe above the set threshold.\
\
  
\f1 \

\f0 \
     \
 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs28 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \
}