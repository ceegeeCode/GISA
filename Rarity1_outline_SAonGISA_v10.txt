Outline of rawRarity1 in SAonGISA_v10_unix.c:

1. Set file names of files to be outputted.

2. Get content of desired directory (of the query pdb’s). ListDirectoryContents/ListDirectoryContents2

3. Bulk memory allocation  to chain-info keeping pointer, chainInStr.

4.If CATH data, read in the “positive list”, cathListPath.

5. Fetch chain info of the query structures. Here, if CATH data, take intersection with CATH positive list. Also get the max chain length and the number of sub-structures.

6. Allocate memory to pointer holding the Gauss invariants’ values, I_measures. 

7. Allocate memory to pointer holding the 3d-coord’s of each chain (ptr_chain).

8. Allocate memory to some pointers for query: to hold I-values on window pairs, the binned version and for the scores (alloc_init_I_windowPairs_ptr, alloc_init_queryRawScore, alloc_init_ptr_binned_I_windowPairs, alloc_init_ptr_Irarity_windowPairs).

9. Define/allocate to a convenience pointer holding mutual I-values for query. 

10. Load data base (DB): read in the DB of I-values for pairs  (readDBresultsWindowPairsToPtr)

11. Define/allocate to a convenience pointer holding mutual I-values for DB.

12. Bin DB and sort it all lexicographically. First generate the set of bins (generateBinsPairs), then bin the whole DB (binDBresultsWindowPairs) and finally sort it (heapSortBinnedDBPairs).
  
13. Create an array holding the number of occurences of/size of match set for each word in the data base.

14. Read in rarityScore-data and generate the distribution of these (readSortRarityScoreData
).

15. Allocate and initialize ptr,  ptr_matchIndicator, to hold a match indicator for the matching obtained in each "word search”. this consists in a 0/1-array (1 indicating match).

16. Define/allocate pointer to hold match ranges for the nrOfEntries I-values to match on ( ptr_newRange).

17. A couple of allocation for read-out names.

18. Main loop starts here. Consists in outer loop over the query files (structures) and an inner loop over the chains in each query structure.

18.1. We skip the chain if it is too long (if it length is above the pre-defined maxChainLength
). If CATH data, check if query is in positive list of CATH domains (else continue to next structure).

18.2. Reinitialize the chain-info pointer (reinit_chainInStr
) and fetch the chain info (readPDBChainStructureSCOP
, readPDBDomainStructureCATH
, readPDBChainStructure2)

19. Inner loop over the sub-structures of the query file starts here.

19.1. If CATH data, the domain is a subset of a single chain, so if the current chain is “the wrong one” we skip it.

19.2. Set som structure/chain characteristics in the the pointer holding the I-values. And set a chain-length.

19.3. If SCOP data, we skip the chain if it is class h, i, j or k.

19.4. Read in the 3d-coord chain (main_readPDB2) and populate the pointer holding the 3d-coord array (ptr_segment).
19.4.1. Skip chain if it contains a too long segment.

19.5. Initialize the I-values in the pointer holding the I-values (I_measures).

19.6. Compute the I-values for the query (populate the I_measures pointer with the Gauss integral values). (aggrAndW, aggrAndW_ExAbs or wVal+aggr).

20. The actual scoring/matching starts here.

20.1. Derive the values of the invariants on the window pairs (getInvariantsOnWindowPairs
) for the query. This populates the I_windowPairs pointer.

20.2. Normalize the query’s window pairs values if desired (normalizeQueryWindowPairsPtr
).

20.3. Load the query’s window values into the convenience pointer (ptr_query_pairs
). This distinguishes between the (desired) number of invariants used for the matching (nrOfEntriesForPairs). If that parameter is 1 only the mutual writhe will be used; if 2 also the mutual writhe of the abs-value writhe will be used; if above 2 the mutual values of all the order 2 invariants will be used too (incl the ab-value ones, if these are desired — takes setting incl_abs_b = 1). 

20.4. Bin the pairs-results (for query).

20.5. Loop over the query’s window pairs in a double loop over the windows. Only consider the “upper triangular plus the diagonal”. Within this loop the core of the matching/scoring takes place.

20.5.1. Find the max-mutual abs I-value (for the invariants that are considered). Actual “single window pairs”, ie pairs of the same window (k=l), are disregarded.
 
20.5.2. Skip the pair: if the two segments (windows) are not disjoint (ie they overlap); if their max-mutual abs I-value is below the set threshold.

20.5.3. Look up the word of this window pair (query) in the data base; this amounts to looking up the word ptr_binned_I_windowPairs_query[cntPairs] in the array of word counts (ptr_binned_I_counts). 
If we do not allow mismatches, this is a direct look-up in the pre-populated ptr_binned_I_counts pointer.
If we do allow mismatches, that pointer is not pre-populated, so we make the search and record the results as the outer loop over windows and queries progress: first we try looking up in ptr_binned_I_counts; if there is no hit we search the data base for hits, allowing the desired number of mismatches; the hits we find we then record in the ptr_binned_I_counts pointer so that any upcoming search for the same word will be caught by a simple look-up in that very pointer.
The data base search part is done as follows: after an initial potential memory reallocation, first the match-indicator pointer is reset to 0 every where. Then a search for the desired word (
ptr_binned_I_windowPairs_query[cntPairs]) is made (bisectionalSearchSingle_Pairs). All hits are recorded in the match-indicator and their number is counted (cntMatch). 
Finally the convenience pointer ptr_binned_I_counts is updated with the new matches and the order of that array is re-done (bubbleSort_binned_I_counts).

20.5.4. The rarity factor for the pair (probability of finding the pair’s word in the data base) can now be computed (the ratio of cntMatch and the number of pairs in the data base plus a small “pseudo ratio” to avoid log-of-zero when computing the score, which is just -log(probability)).

20.5.5. Record the rarity factor (collect_Irarity_windowPairs
).

20.5.6. Loop over pairs ends here.

20.6. Sum up the scores obtained (for each window pair) and build a string to be written to file, containing all the window pair info of the scoring.

20.7. Compute the score as the average score across all pairs. 

20.8. If a p-value of the query’s score is desired make a look-up i(bisectionalSearchValueL) in the supplied data base of scores (held in pointer ptr_rarityScorePairsDistr).  

20.9. Collect all the results to be written out in the pointer ptr_queryRawScore (collect_queryRawScore). 

20.10. End of inner-loop (loop-over-chains) ends here.

19.7. End of outer loop over files ends here.

21. Sort the obtained score results (heapSortRawScores) and write to file if desired. Close the output file.

22. Free some memory (ptr_segment, ptr_chain, I_measures and dirContent.ptr_dirList).

23. Report some run-times plus how many files and chins were processed and how many query window pairs that had a mutual I-value above the set threshold.

  

     
 


