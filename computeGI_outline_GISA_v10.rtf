{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww37900\viewh20880\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Here follows an overall outline of the C code for the function computeGI in GISA_v9_unix.c. The function is computeGI_windows is similarly build. \
\
The steps in computeGI  after the declarations are:\
\
\
1. Create the file name if write-all is desired (write all invariants' values across simplex to the specified file).\
\
2. If restricted search (closed loops searching) is desired: create file name for the output file and  flush the file.\
\
3. If unrestricted searching is desired (i.e. computing writhe/invariant values for sub-chain pairs aimed for exceptional invariant/writhe-value searching): create file name for the output file and  flush the file.\
\
4. Read in PDB-files from the set directory. This also returns the number of  files loaded. Function: ListDirectoryContents.\
\
5. If CATH data, read in the \'93positive list\'94, 
\f1 \expnd0\expndtw0\kerning0
cathListPath.\

\f0 \kerning1\expnd0\expndtw0 \
6. \expnd0\expndtw0\kerning0
Fetch some chain info of the structures. \kerning1\expnd0\expndtw0 Loop over the number of PDB-files in the directory; open each file, read it in and record the length (of the longest sub-chain); record the max length so far. \expnd0\expndtw0\kerning0
Here, if CATH data, take intersection with CATH positive list.\kerning1\expnd0\expndtw0 \
\
7. Using the found max length, allocate and initialize a set of pointers to hold the values of the invariants for this chain length; function: alloc_init_I_measures.\
\
7. If write-final is wanted: allocate and initialize pointer for storing final results (write only the invariants' values on the full chains to file, i.e. the "final corner" values) \
\
9. Now go on to computing the GIs: Start main loop over the number of files in the directory.\
\
10. \expnd0\expndtw0\kerning0
Reinitialize the chain-info pointer (
\f1 reinit_chainInStr
\f0 ) and fetch the chain info like \kerning1\expnd0\expndtw0 number and lengths of sub-chains in the current structure (PDB-file)\expnd0\expndtw0\kerning0
  (Functions: 
\f1 readPDBChainStructureSCOP
\f0 , 
\f1 readPDBDomainStructureCATH, readPDBChainStructure2).
\f0 \kerning1\expnd0\expndtw0 \
\
11. Start inner loop over the number of sub-chains. \
\
12. Start clock for cpu-time consumption for current file ("chainTime").\
\
12. Rewind the PDB-file. Then find the chain length of the current sub-chain (sub-chain number) of the structure; load the sub-chain structure ("chain" in what follows); function: main_readPDB2. \
\
14. Convert the chain into array of segments; for this allocate memory to pointer.\
\
15. Skip the chain if it contains segments that are regarded as too long. \
\
16.  Initialize the pointer for holding the values of the invariants; function: init_I_measures\
\
17. Start clock/QueryPerformanceCounter for cpu-time consumption of computation (computation time, "compTime")\
\
18. Compute the invariants. This will either consist in: a) One call to a function running a recursion in which both the $w$-terms and the aggregation are carried out; function: aggrAndW or aggrAndW_ExAbs (the latter will skip computation of the absolute value versions of the invariants, and is called if incl_abs_b = 0); or, b): if splitting these two (split_b = 1), a call to a computation of all $w$-terms and a subsequent recursion; for the latter the functions wAll and aggr are called, respectively; or c): a call to the closed-loops searching and computation: functions aggrAndW_wClosedLoops and examineClosedLoops (closed_loops_b = 1). In the latter case the mutual writhe values are computed and written to a file in the call to examineClosedLoops (the write-out thresholds for pokes, thresholdPokes, and links, thresholdLinks, can be set to limit the output).\
\
19. If an unrestricted search is wanted (invValSubChainPairs_b != 0) a call to the writhe/invariants of sub-chains computation follows. This consists in a call to writheSubChainPairs or to  genInvariantSubChainPairs depending on whether invValSubChainPairs_b = 1 or (= 2 or = 3), respectively. These functions compute the desired mutual writhe (or mutual invariant) values and writes the results to a file. When invValSubChainPairs_b = 1 only the mutual writhe of the order 1 invariants are used (and the write-out can be limited by setting the threshold, thresholdWrithe); when invValSubChainPairs_b = 2 (resp 3) mutuals (defined by the same formula as in order 1) are computed for invariants up to order 2 (resp 3).\
\
20.. End clock//QueryPerformanceCounter for computation time.\
\
21. If write-all is wanted: write the invariant values to file; function: writeAllIvaluesToFile.\
\
22. If write-final is desired: collect the invariant values at the "top left corner of the simplex", i.e. the final values; function: collectIvalues.\
\
23. Close the sub-chains loop.\
\
24. Close the open PDB-file. \
\
25. Close loop over number of files.\
\
26. Free memory allocated for holding invariant values; function: free_I_measures. Free memory allocated for chain and segment arrays.\
\
27. If wanted, write final values to file; function: writeIvaluesToFile. Then free the memory dedicated to this end.\
\
28. Record time consumption for complete run and more and print these to screen. \
\
Many of these steps are done by a call to a function dedicated to the purpose. Similar use of these functions is found in the function computeGI_windows and in the rarity scans, rawRarity0, 1 and 2.}